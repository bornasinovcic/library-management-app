// <auto-generated />
using System;
using LibraryManagementApp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementApp.DAL.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240612131407_UpdateLists")]
    partial class UpdateLists
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementApp.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceOfBirthId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceOfBirthId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibraryManagementApp.Model.AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("LibraryManagementApp.Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("genreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("genreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryManagementApp.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "United States",
                            Name = "New York"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Canada",
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = 3,
                            Country = "United Kingdom",
                            Name = "London"
                        },
                        new
                        {
                            Id = 4,
                            Country = "Australia",
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Germany",
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 6,
                            Country = "France",
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 7,
                            Country = "Italy",
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 8,
                            Country = "Spain",
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = 9,
                            Country = "Brazil",
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = 10,
                            Country = "India",
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = 11,
                            Country = "Japan",
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 12,
                            Country = "China",
                            Name = "Beijing"
                        });
                });

            modelBuilder.Entity("LibraryManagementApp.Model.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Romance novel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Young adult"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Adventure fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dystopian"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 11,
                            Name = "History"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Crime and Thriller"
                        });
                });

            modelBuilder.Entity("LibraryManagementApp.Model.Author", b =>
                {
                    b.HasOne("LibraryManagementApp.Model.City", "PlaceOfBirth")
                        .WithMany()
                        .HasForeignKey("PlaceOfBirthId");

                    b.Navigation("PlaceOfBirth");
                });

            modelBuilder.Entity("LibraryManagementApp.Model.AuthorBook", b =>
                {
                    b.HasOne("LibraryManagementApp.Model.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementApp.Model.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryManagementApp.Model.Book", b =>
                {
                    b.HasOne("LibraryManagementApp.Model.Genre", "genre")
                        .WithMany()
                        .HasForeignKey("genreId");

                    b.Navigation("genre");
                });

            modelBuilder.Entity("LibraryManagementApp.Model.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("LibraryManagementApp.Model.Book", b =>
                {
                    b.Navigation("AuthorBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
